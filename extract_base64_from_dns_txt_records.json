#Example Data

https://gchq.github.io/CyberChef/#recipe=Find_/_Replace(%7B'option':'Regex','string':'_'%7D,'%2B',true,false,true,false)Regular_expression('User%20defined','%5Ba-zA-Z0-9%5C%5C%3D%5C%5C%2B%5C%5C/%5D%7B50,%7D',false,true,false,false,false,false,'List%20matches')Fork('%5C%5Cn','%5C%5Cn',false)From_Base64('A-Za-z0-9%2B/%3D',true,false)&input=ICAgICAgICAgICAgIm5hbWUiOiAicHJpdmF0cHJveHktc2NobmVsbHZwbi54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDE5ODYsCiAgICAgICAgICAgICJkYXRhIjogIi5BQUFBQUp6NUtvY3V4Z2pnWHdOYVhmVGc1SjVJT2JmR1JVcHQ0YWcyUmZFNUk5ZXB4bnFxNE04SHU3VkdWQ19NNkowVjg4U0s1ZFllX0sxNUs1c0Z0ajREcXRrQ1pYakkxY01XODBjTWg3VFk0Sk0xNVF0OW40b1JRWFlvR3FvWGkyaGxqZTl6Vkxla2U2ZzhzdGJlWUV2Nkp3UVRhR05weUNYZXp2N1RzWEhRdDFZY2FJQl9jNXI4MmdoYlUyVmpkWEpwZEhrdVEzSjVjSFJ2WjNKaGNHaDVMbE5JUVRJMU5sMGtjMmhoSUQwZ1cxTmxZM1Z5YVhSNUxrTnllWEIwYjJkeVlYQm9lUzVUU0VFeU5UWmRPanBEY21WaGRHVW9LUTBLSkcxaFkyZDFhV1FnUFNBb1IyVjBMVWwwWlcxUWNtOXdaWEowZVNBb0tDaGJjbVZuWlhoZE9qcE5ZWFJqYUdWektDZDVhSEJoY21kdmRIQjVja05jZEdadmMyOXlZMmxOWEVWU1FWZFVSazlUWERwTlRFdElKeXduTGljcyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAicHJpdmF0cHJveHktc2NobmVsbHZwbi54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDE5ODYsCiAgICAgICAgICAgICJkYXRhIjogIi5OQUVBQUNkU2FXZG9kRlJ2VEdWbWRDY3BJSHdnUm05eVJXRmphQ0I3SkY4dWRtRnNkV1Y5S1NBdGFtOXBiaUFuSnlrcElDMU9ZVzFsSUUxaFkyaHBibVZIZFdsa0tTNU5ZV05vYVc1bFIxVkpSRHNOQ2lSMWMyVnlhV1FnUFNBaUpDZ2taVzUyT2xWVFJWSkVUMDFCU1U0cEpDZ2taVzUyT2xWVFJWSk9RVTFGS1NRb0pHVnVkanBRVWs5RFJWTlRUMUpmVWtWV1NWTkpUMDRwSkNna1pXNTJPbEJTVDBORlUxTlBVbDlKUkVWT1ZFbEdTVVZTS1NRb0pHVnVkanBRVWs5RFJWTlRUMUpmVEVWV1JVd3BKQ2drWlc1Mk9rNVZUVUpGVWw5UFJsOVFVazlEUlZOVFQxSlRLU1FvSkcxaFkyZDFhV1FwSWpzTkNpUm5kV2xrSUQwZ0tDUnphR0V1UTI5dGNIVjBaVWhoYzJnb1cxUmxlSFF1Ulc1amIyUnBibWRkT2pwVlZFWTRMa2RsZEVKNWRHVnpLQ1IxYzJWeSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAicHJpdmF0cHJveHktc2NobmVsbHZwbi54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDE5ODYsCiAgICAgICAgICAgICJkYXRhIjogIi5hQUlBQUdsa0tTa2dmQ0JHYjNKRllXTm9MVTlpYW1WamRDQlViMU4wY21sdVp5QllNaWtnTFdwdmFXNGdKeWM3RFFwM2FHbHNaU0FvSkhSeWRXVXBJSHNnRFFvZ0lDQWdkSEo1SUhzZ0RRb2dJQ0FnSUNBZ0lDUnlJRDBnU1c1MmIydGxMVkpsYzNSTlpYUm9iMlFnTFZWeWFTQWlhSFIwY0RvdkwyTm9ZWFJuYVdkcE1pNWpiMjB2WVhCcEwzWXhMeVFvSkdkMWFXUXBJZzBLSUNBZ0lDQWdJQ0JwWmlBb0pISWdMVzVsSUNjbktTQjdJQTBLSUNBZ0lDQWdJQ0FnSUNBZ0pHSjFaaUE5SUZ0RGIyNTJaWEowWFRvNlJuSnZiVUpoYzJVMk5GTjBjbWx1Wnlna2NpazdEUW9nSUNBZ0lDQWdJQ0FnSUNCbWIzSWdLQ1JwSUQwZ01Ec2dKR2tnTFd4MElDUmlkV1l1VEdWdVozUm9PeUFrYVNzcktTQjdEUW9nSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdKR0oxWmxzayIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAicHJpdmF0cHJveHktc2NobmVsbHZwbi54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDE5ODYsCiAgICAgICAgICAgICJkYXRhIjogIi5uQU1BQUdsZElEMGdKR0oxWmxza2FWMGdMV0o0YjNJZ01qSTdEUW9nSUNBZ0lDQWdJQ0FnSUNCOURRb2dJQ0FnSUNBZ0lDQWdJQ0FrYkdsdVpYTWdQU0JiVkdWNGRDNUZibU52WkdsdVoxMDZPa0ZUUTBsSkxrZGxkRk4wY21sdVp5Z2tZblZtS1M1VGNHeHBkQ2dpWUhKZ2JpSXBPdzBLSUNBZ0lDQWdJQ0FnSUNBZ0pIQWdQU0JiUkdsaFoyNXZjM1JwWTNNdVVISnZZMlZ6YzEwNk9tNWxkeWdwT3cwS0lDQWdJQ0FnSUNBZ0lDQWdKSEF1VTNSaGNuUkpibVp2TGxkcGJtUnZkMU4wZVd4bElEMGdKMGhwWkdSbGJpYzdEUW9nSUNBZ0lDQWdJQ0FnSUNBa2NDNVRkR0Z5ZEVsdVptOHVSbWxzWlU1aGJXVWdQU0FuY0c5M1pYSnphR1ZzYkM1bGVHVW5PdzBLSUNBZ0lDQWdJQ0FnSUNBZ0pIQXVVM1JoY25SSmJtWnZMbFZ6WlZOb1pXeHNSWGhsWTNWMCIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAicHJpdmF0cHJveHktc2NobmVsbHZwbi54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDE5ODYsCiAgICAgICAgICAgICJkYXRhIjogIi4wQVFBQUdVZ1BTQWtabUZzYzJVN0RRb2dJQ0FnSUNBZ0lDQWdJQ0FrY0M1VGRHRnlkRWx1Wm04dVVtVmthWEpsWTNSVGRHRnVaR0Z5WkVsdWNIVjBJRDBnSkhSeWRXVTdEUW9nSUNBZ0lDQWdJQ0FnSUNBa2NDNVRkR0Z5ZEVsdVptOHVVbVZrYVhKbFkzUlRkR0Z1WkdGeVpFOTFkSEIxZENBOUlDUjBjblZsT3cwS0lDQWdJQ0FnSUNBZ0lDQWdKSEF1VTNSaGNuUW9LVHNOQ2lBZ0lDQWdJQ0FnSUNBZ0lDUndMa0psWjJsdVQzVjBjSFYwVW1WaFpFeHBibVVvS1RzTkNpQWdJQ0FnSUNBZ0lDQWdJR1p2Y21WaFkyZ2dLQ1JzYVc1bElHbHVJQ1JzYVc1bGN5a2dldzBLSUNBZ0lDQWdJQ0FnSUNBZ0lDQWdJQ1J3TGxOMFlXNWtZWEprU1c1d2RYUXVWM0pwZEdWTWFXNWxLQ1JzYVc1bEtUc2dJQTBLSUNBZ0lDQWdJQ0FnSUNBZ2ZRMEtJQ0FnSUNBZyIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAicHJpdmF0cHJveHktc2NobmVsbHZwbi54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDE5ODYsCiAgICAgICAgICAgICJkYXRhIjogIi5CQVlBQUNBZ0lDQWdJQ1J3TGxOMFlXNWtZWEprU1c1d2RYUXVWM0pwZEdWTWFXNWxLQ2NuS1RzZ0lBMEtJQ0FnSUNBZ0lDQWdJQ0FnSkhBdVYyRnBkRVp2Y2tWNGFYUW9LVHNOQ2lBZ0lDQWdJQ0FnSUNBZ0lHSnlaV0ZyT3cwS0lDQWdJQ0FnSUNCOUlBMEtJQ0FnSUgwZ0RRb2dJQ0FnWTJGMFkyZ2dldzBLSUNBZ0lIMGdEUW9nSUNBZ1UzUmhjblF0VTJ4bFpYQWdNZzBLZlEwSyIKICAgICAgICB9CiAgICBdCn0KewogICAgIlN0YXR1cyI6IDAsCiAgICAiVEMiOiBmYWxzZSwKICAgICJSRCI6IHRydWUsCiAgICAiUkEiOiB0cnVlLAogICAgIkFEIjogZmFsc2UsCiAgICAiQ0QiOiBmYWxzZSwKICAgICJRdWVzdGlvbiI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogImFob3JhdmlkZW8tZW5kcG9pbnQueHl6LiIsCiAgICAgICAgICAgICJ0eXBlIjogMTYKICAgICAgICB9CiAgICBdLAogICAgIkFuc3dlciI6IFsKICAgICAgICB7CiAgICAgICAgICAgICJuYW1lIjogImFob3JhdmlkZW8tZW5kcG9pbnQueHl6LiIsCiAgICAgICAgICAgICJ0eXBlIjogMTYsCiAgICAgICAgICAgICJUVEwiOiA3MjAwLAogICAgICAgICAgICAiZGF0YSI6ICIuQkJJRlpKUTFSSlRTTWpJeUFqSXlNakl5TWpJeU1qSXlNakl5TWpJMDlHSUVGVFUwaFBURVVnVFVGTU8xY2hVa1VqSXlNakl5TWpJIgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJhaG9yYXZpZGVvLWVuZHBvaW50Lnh5ei4iLAogICAgICAgICAgICAidHlwZSI6IDE2LAogICAgICAgICAgICAiVFRMIjogNzIwMCwKICAgICAgICAgICAgImRhdGEiOiAiLkl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU5JUlV4TVR5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5IgogICAgICAgIH0sCiAgICAgICAgewogICAgICAgICAgICAibmFtZSI6ICJhaG9yYXZpZGVvLWVuZHBvaW50Lnh5ei4iLAogICAgICAgICAgICAidHlwZSI6IDE2LAogICAgICAgICAgICAiVFRMIjogNzIwMCwKICAgICAgICAgICAgImRhdGEiOiAiLkl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU5JUlV4TVR5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5Lk1qSXlNakl5TWpJQ01qSTFsUFZTQkJVa1VnVEZWRFMxa2dTU0JUUVZaRlJDQlpUMVVnUmxKUFRTQkNSVU5QVFVsT1J5LkJCSUZaSlExUkpUU01qSXlBakl5TWpJeU1qSXlNakl5TWpJeU1qSTA5R0lFRlRVMGhQVEVVZ1RVRk1PMWNoVWtVakl5TWpJeU1qSS55TWpJeU1qSXlNakl5TWdJeU1qSXlNakl5TWpJeU1qSXlNakkyTnNaV0Z1SUhsdmRYSWdaR1YyYVdObElFNVBWeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJQ01qSXlNakl5TWpJeU1qSTBSSi5RVkpJUlVFZ1ZFOGdRVXhNSUVOUFNVNVRWRVZCVEVWU1V5TWpJeU1qSXlNakl5TWpJeU1qSXlBakl5TWpJeU1qSXlNakl5TWpSVUZTVGlCWlQxVlNJRTFQVGtWWklGbFBWU0JRVlZCUVJWUlRJeU1qSXlNakl5TWpJeU1qSXlNPSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiYWhvcmF2aWRlby1lbmRwb2ludC54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDcyMDAsCiAgICAgICAgICAgICJkYXRhIjogIi5JeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlOSVJVeE1UeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJQ01qSTFsUFZTQkJVa1VnVEZWRFMxa2dTU0JUUVZaRlJDQlpUMVVnUmxKUFRTQkNSVU5QVFVsT1J5QkJJRlpKUTFSSlRTTWpJeUFqSXlNakl5TWpJeU1qSXlNakl5TWpJMDlHSUVGVFUwaFBURVVnVFVGTU8xY2hVa1VqSXlNakl5TWpJeU1qSXlNakl5TWpJeU1nSXlNakl5TWpJeU1qSXlNakl5TWpJMk5zWldGdUlIbHZkWElnWkdWMmFXTmxJRTVQVnlNakl5TWpJeU1qSXlNakl5TWpJeU1qSUNNakl5TWpJeU1qSXlNakkwUkpRVkpJUlVFZ1ZFOGdRVXhNSUVOUFNVNVRWRVZCVEVWU1V5TWpJeU1qSXlNakl5TWpJeU1qSXlBakl5TWpJeU1qSXlNakl5TWpSVUZTVGlCWlQxVlNJRTFQVGtWWklGbFBWU0JRVlZCUVJWUlRJeU1qSXlNakl5TWpJeU1qSXlNPSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiYWhvcmF2aWRlby1lbmRwb2ludC54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDcyMDAsCiAgICAgICAgICAgICJkYXRhIjogIi5Nakl5TWpJeU1qSUNNakkxbFBWU0JCVWtVZ1RGVkRTMWtnU1NCVFFWWkZSQ0JaVDFVZ1JsSlBUU0JDUlVOUFRVbE9SeSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiYWhvcmF2aWRlby1lbmRwb2ludC54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDcyMDAsCiAgICAgICAgICAgICJkYXRhIjogIi5RVkpJUlVFZ1ZFOGdRVXhNSUVOUFNVNVRWRVZCVEVWU1V5TWpJeU1qSXlNakl5TWpJeU1qSXlBakl5TWpJeU1qSXlNakl5TWpSVUZTVGlCWlQxVlNJRTFQVGtWWklGbFBWU0JRVlZCUVJWUlRJeU1qSXlNakl5TWpJeU1qSXlNPSIKICAgICAgICB9LAogICAgICAgIHsKICAgICAgICAgICAgIm5hbWUiOiAiYWhvcmF2aWRlby1lbmRwb2ludC54eXouIiwKICAgICAgICAgICAgInR5cGUiOiAxNiwKICAgICAgICAgICAgIlRUTCI6IDcyMDAsCiAgICAgICAgICAgICJkYXRhIjogIi55TWpJeU1qSXlNakl5TWdJeU1qSXlNakl5TWpJeU1qSXlNakkyTnNaV0Z1SUhsdmRYSWdaR1YyYVdObElFNVBWeU1qSXlNakl5TWpJeU1qSXlNakl5TWpJQ01qSXlNakl5TWpJeU1qSTBSSiIKICAgICAgICB9

#Chef Format

Find_/_Replace({'option':'Regex','string':'_'},'+',true,false,true,false)
Regular_expression('User defined','[a-zA-Z0-9\\=\\+\\/]{50,}',false,true,false,false,false,false,'List matches')
Fork('\\n','\\n',false)
From_Base64('A-Za-z0-9+/=',true,false)

#Clean JSON

[
  { "op": "Find / Replace",
    "args": [{ "option": "Regex", "string": "_" }, "+", true, false, true, false] },
  { "op": "Regular expression",
    "args": ["User defined", "[a-zA-Z0-9\\=\\+\\/]{50,}", false, true, false, false, false, false, "List matches"] },
  { "op": "Fork",
    "args": ["\\n", "\\n", false] },
  { "op": "From Base64",
    "args": ["A-Za-z0-9+/=", true, false] }
]

#Compact JSON

[{"op":"Find / Replace","args":[{"option":"Regex","string":"_"},"+",true,false,true,false]},{"op":"Regular expression","args":["User defined","[a-zA-Z0-9\\=\\+\\/]{50,}",false,true,false,false,false,false,"List matches"]},{"op":"Fork","args":["\\n","\\n",false]},{"op":"From Base64","args":["A-Za-z0-9+/=",true,false]}]
